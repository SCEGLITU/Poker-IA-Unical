Index: core/src/com/mygdx/game/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.mygdx.game;\n\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.Input;\nimport com.badlogic.gdx.graphics.Texture;\nimport com.badlogic.gdx.graphics.g2d.Batch;\nimport com.badlogic.gdx.graphics.g2d.Sprite;\nimport com.badlogic.gdx.graphics.g2d.BitmapFont;\nimport com.badlogic.gdx.math.Rectangle;\n\nimport java.net.URL;\nimport java.util.List;\n\nimport java.io.File;\nimport java.util.ArrayList;\n\nimport it.unical.mat.embasp.base.Handler;\nimport it.unical.mat.embasp.base.InputProgram;\nimport it.unical.mat.embasp.base.Output;\nimport it.unical.mat.embasp.languages.asp.ASPInputProgram;\nimport it.unical.mat.embasp.languages.asp.AnswerSet;\nimport it.unical.mat.embasp.languages.asp.AnswerSets;\nimport it.unical.mat.embasp.platforms.desktop.DesktopHandler;\nimport it.unical.mat.embasp.specializations.dlv2.desktop.DLV2DesktopService;\n\nenum PlayerDirection{UP_PLAYER(0), LEFT_PLAYER(1), RIGHT_PLAYER(2), DOWN_PLAYER(3);\nint value = 5;\n    PlayerDirection(int i)\n    {\n        this.value = i;\n    }\n    public int getValue()\n    {\n        return value;\n    }\n    public static PlayerDirection getPlayerDirection(int i)\n    {\n        switch (i)\n        {\n            case 0:\n                return UP_PLAYER;\n\n            case 1:\n                return LEFT_PLAYER;\n\n            case 2:\n                return RIGHT_PLAYER;\n\n            case 3:\n                return DOWN_PLAYER;\n        }\n        return UP_PLAYER;\n    }\n};\n\npublic class Game {\n\n    private BitmapFont bitmapFont = new BitmapFont();\n    private Sprite plus;\n    private Sprite min;\n    private Sprite check;\n    private Sprite raise;\n    private Sprite fold;\n    Sprite finish;\n    private Cursor cursor;\n    private int playerShift = 0;\n    private int round = 1;\n    private int currentValue = 20;\n    private int currentPlayerValue = 0;\n    boolean isRoundFinished = false;\n    public ArrayList rmve;\n    static final public int UP_PLAYER = 0;\n    static final public int LEFT_PLAYER = 1;\n    static final public int RIGHT_PLAYER = 2;\n    static final public int DOWN_PLAYER = 3;\n    static final public int NUM_OF_PLAYERS = 4;\n    static final public int NUM_OF_CARDS = 5;\n    static public Dealer dealer;\n    private ArrayList<Player> players;\n    public Deck deck;\n    private String encodingNormalRound;\n    private String encodingDiscardCardsRound;\n    private String pathDlv;\n    private static Handler handler;\n    InputProgram facts;\n\n    public Game() {\n        dealer = new Dealer();\n        players = new ArrayList<>();\n        rmve = new ArrayList<>();\n        bitmapFont.getData().setScale(2);\n        deck = Deck.getIstance();\n        initButton();\n        initCursor();\n        createPlayers();\n        setAllCardForAllPlayer();\n        setPathResources();\n    }\n\n    private void setPathResources()\n    {\n        if (System.getProperty(\"os.name\").contains(\"Linux\")) {\n            pathDlv =\n                    (new File(Game.class.getResource(\"/\").toString()).getParentFile().getParentFile().getParent()\n                            +\"/resources/main/dlv2\").substring(5);\n            encodingNormalRound = \"encodings/normalRound.dlv\";\n            encodingDiscardCardsRound= \"encodings/discardCardsRound.dlv\";\n        }else\n        {\n            pathDlv = \"./desktop/build/resources/main/dlv2.win.x64_5\";\n            encodingNormalRound = \"./desktop/build/resources/main/encodings/normalRound.dlv\";\n            encodingDiscardCardsRound = \"./desktop/build/resources/main/encodings/discardCardsRound.dlv\";\n        }\n    }\n\n    public void moveByAI(int cpuIndex) {\n        handler = new DesktopHandler(new DLV2DesktopService(pathDlv));\n        facts = new ASPInputProgram();\n        ArrayList<Card> crds = players.get(cpuIndex).getCards();\n        try {\n            for (int i = 0; i < 5; i++) {\n                facts.addObjectInput(new Card(crds.get(i).suite, crds.get(i).number));\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        handler.addProgram(facts);\n        InputProgram encoding = new ASPInputProgram();\n        if(round==2)\n            encoding.addFilesPath(encodingDiscardCardsRound);\n        else\n            encoding.addFilesPath(encodingNormalRound);\n        handler.addProgram(encoding);\n\n        Output o = handler.startSync();\n        AnswerSets answers = (AnswerSets) o;\n        if (answers.getAnswersets().size() == 0) {\n            System.out.println(\"NO ANSWERSETS!!\");\n            System.exit(0);\n        }\n        else\n        {\n            for(AnswerSet an: answers.getAnswersets())\n            {\n                for(String buh:an.getAnswerSet())\n                {\n                    System.out.println(buh);\n                }\n            }\n        }\n\n        boolean trovato = false;\n\n        //discard cards if it's the correct round\n        if (round == 2) {\n            ArrayList rmv = new ArrayList();\n            for (AnswerSet a : answers.getAnswersets()) {\n                if (trovato)\n                    break;\n                try {\n                    for (Object obj : a.getAtoms()) {\n                        if (obj instanceof Card) { //We haven't need Card obj but CardToDiscard or something like that (obv objs that DLV want to discard)\n                            rmv.add(obj);\n                        }\n                    }\n\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                break;\n            }\n            //changeCardforPlayer(cpuIndex,rmv); //discard cards here\n        }\n        else{\n            //DLV select check raise or fold\n        }\n    }\n    public void createPlayers()\n    {\n        for(int i = 0; i < NUM_OF_PLAYERS - 1; i++)\n            players.add(new Enemy(PlayerDirection.getPlayerDirection(i)));\n        players.add(new Human(PlayerDirection.getPlayerDirection(NUM_OF_PLAYERS - 1)));\n    }\n\n    private void initCursor() {\n        cursor = new Cursor();\n    }\n\n    private void initButton() {\n        plus = new Sprite(new Texture(\"game/Plus.png\"));\n        plus.setSize(70,50);\n        plus.setPosition(150,MyGdxGame.WORLD_HEIGHT/2-20);\n\n        min = new Sprite(new Texture(\"game/Min.png\"));\n        min.setSize(70,50);\n        min.setPosition(300,MyGdxGame.WORLD_HEIGHT/2-30);\n\n        check = new Sprite(new Texture(\"game/Check.png\"));\n        check.setSize(150,80);\n        check.setPosition(450,MyGdxGame.WORLD_HEIGHT/2-30);\n\n        fold = new Sprite(new Texture(\"game/Fold.png\"));\n        fold.setSize(150,80);\n        fold.setPosition(600,MyGdxGame.WORLD_HEIGHT/2-30);\n\n        raise = new Sprite(new Texture(\"game/Raise.png\"));\n        raise.setSize(150,80);\n        raise.setPosition(750,MyGdxGame.WORLD_HEIGHT/2-30);\n        finish = new Sprite(new Texture(\"finish.png\"));\n        finish.setSize(finish.getWidth()-250,finish.getHeight()-20);\n        finish.setPosition(0,MyGdxGame.WORLD_HEIGHT/2);\n    }\n\n    public void setAllCardForAllPlayer(){\n        dealer.shuffle();\n        for(int i = 0; i < NUM_OF_PLAYERS; i++) {\n            players.get(i).reset();\n            for (int j = 0; j < NUM_OF_CARDS; j++) {\n                players.get(i).addCard(dealer.getCard());\n            }\n        }\n    }\n\n    public void changeCardforPlayerForPosition(int cpuindex, ArrayList<Integer> cardposition){\n        for (int i = 0; i < cardposition.size(); i++) {\n            players.get(cpuindex).removeCard(cardposition.get(i));\n        }\n        for(int i=0;i<cardposition.size();i++)\n            players.get(cpuindex).addCard(dealer.getCard());\n    }\n\n    public void changeCardforPlayer(int cpuindex, ArrayList<Card> cardposition){\n        for (int i = 0; i < cardposition.size(); i++) {\n            players.get(cpuindex).removeCard(cardposition.get(i));\n        }\n\n        for(int i=0;i<cardposition.size();i++)\n            players.get(cpuindex).addCard(dealer.getCard());\n        //:'D\n    }\n\n    /*public void drawButtonToSelect(Batch batch){\n        if(playerShift ==1 && (round==1 ||round==3)){\n            check.draw(batch);\n            fold.draw(batch);\n            min.draw(batch);\n            raise.draw(batch);\n            plus.draw(batch);\n        }\n    }*/\n\n    public void draw(Batch batch){\n       for(Player player:players) {\n           player.draw(batch);\n           bitmapFont.draw(batch,\"\" + player.getName() + \"\\nm: \" + player.getMoney(),\n                   player.getUpgradeX(), player.getUpgradeY());\n       }\n       gameCicle(batch);\n       if(isRoundFinished) {\n           finish.draw(batch);\n           if(Gdx.input.isKeyJustPressed(Input.Keys.ENTER)){\n               isRoundFinished=false;\n           }\n       }\n    }\n\n    public void gameCicle(Batch batch){\n\n        boolean useKeyboard = false;\n\n\n        if(!isRoundFinished){\n\n            Player player = players.get(playerShift);\n\n            // if the player hasn't folded and the current checked sum is less than the current value of the plate\n            if(!player.isFold() && player.getCurrentChecked() < currentValue) {\n\n                // if it's in the round where the player can raise the sum\n                if ((round == 1 || round == 3) && player instanceof Human) {\n                    bitmapFont.draw(batch, \"\"+currentPlayerValue, 250,MyGdxGame.WORLD_HEIGHT/2f+15);\n                    player.drawKeybord(batch);\n\n                    if(Gdx.input.isButtonJustPressed(Input.Buttons.LEFT))\n                        System.out.println(\"Mouse x: \" + cursor.getX() + \" y: \" + cursor.getY());\n\n                    // mouse pressing input\n\n\n                    // press plus\n                    if (cursor.intersectSprite(((Human) player).plus)) {\n                        if (Gdx.input.isButtonJustPressed(Input.Buttons.LEFT)) {\n                            currentPlayerValue += 10;\n                            System.out.println(currentPlayerValue); //get current raise value\n                        }\n                    }\n\n                    // press min\n                    if (cursor.intersectSprite(((Human) player).min)) {\n                        if (Gdx.input.isButtonJustPressed(Input.Buttons.LEFT)) {\n                            if (currentPlayerValue > currentValue)\n                                currentPlayerValue -= 10;\n                            System.out.println(currentPlayerValue); // get current raise value\n                        }\n                    }\n\n                    // press fold\n                    if (cursor.intersectSprite(((Human) player).fold)) {\n                        if (Gdx.input.isButtonJustPressed(Input.Buttons.LEFT)) {\n                            player.setFold(true);\n                            printFold(playerShift, batch);\n                            System.out.println(player.isFold()); // set fold true\n                        }\n                    }\n\n                    // press check\n                    if (cursor.intersectSprite(((Human) player).check)) {\n                        if (Gdx.input.isButtonJustPressed(Input.Buttons.LEFT)) {\n                            player.setCurrentChecked(currentValue);\n                            currentPlayerValue=currentValue;\n                            System.out.println(currentValue); //get current check value\n                            printCheck(playerShift, batch);\n                            increaseRound(batch);\n                        }\n                    }\n                    // press raise\n                    else if (cursor.intersectSprite(((Human) player).raise)) {\n                        if (Gdx.input.isButtonJustPressed(Input.Buttons.LEFT) && currentPlayerValue >currentValue) {\n                            currentValue = currentPlayerValue;\n                            player.setCurrentChecked(currentPlayerValue);\n                            System.out.println(currentValue); //get current check value\n                            printRaise(currentValue, playerShift, batch);\n                            if(playerShift==0)\n                                increaseRound(batch);\n                            else\n                                playerShift=0;\n                        }\n                    }\n                    //END\n                }\n                else if (round == 2 && player instanceof Human) {\n                    if ((Gdx.input.isKeyJustPressed(Input.Keys.RIGHT) || Gdx.input.isKeyJustPressed(Input.Keys.LEFT))) {\n                        int count = 0;\n                        int sizeCards = player.getCards().size();\n                        boolean setFirstPos = true;\n                        for (Card card : player.getCards()) {\n                            Sprite cardSprite = deck.getCard(card);\n                            if (cursor.intersectSprite(cardSprite)) {\n                                if (Gdx.input.isKeyJustPressed(Input.Keys.RIGHT))\n                                    count++;\n                                else\n                                    count--;\n\n                                if (count == -1) {\n                                    count = sizeCards - 1;\n                                }\n                                cursor.setX(deck.getCard(player.getCard((count) % sizeCards)).getX() + 5);\n                                cursor.setY(Gdx.graphics.getHeight() - MyGdxGame.CARD_HEIGHT - deck.getCard(player.getCard((count) % sizeCards)).getY() + 5);\n                                setFirstPos = false;\n                                break;\n                            }\n                            count++;\n                        }\n\n                        if (setFirstPos) {\n                            cursor.setX(deck.getCard(player.getCard(0)).getX() + 5);\n                            cursor.setY(Gdx.graphics.getHeight() - MyGdxGame.CARD_HEIGHT - (deck.getCard(player.getCard(0)).getY()) + 5);\n                        }\n                        useKeyboard = true;\n                    }\n                    for(Card card: player.getCards())\n                    {\n                        Rectangle rectangleCard = Deck.getIstance().getCard(card).getBoundingRectangle();\n                        if(rectangleCard.contains(cursor.getX(), cursor.getY()))\n                            if (Gdx.input.isButtonJustPressed(Input.Buttons.LEFT) && (!(rmve.contains(card)))) {\n                                rmve.add(card);\n                                System.out.println(\"remove this card\");\n                            }\n                    }\n                    if (Gdx.input.isKeyJustPressed(Input.Keys.ENTER)) {\n                        changeCardforPlayer(playerShift,rmve);\n                        System.out.println(\"removed all selected cards\");\n                        rmve.clear();\n                        increaseRound(batch);\n                    }\n                }\n                else if (round == 1 || round == 3) {\n                    moveByAI(playerShift); //decidere check fold o raise\n                    increaseRound(batch);\n                }\n                else if (round == 2) {\n                    moveByAI(playerShift); //scarta carte\n                    increaseRound(batch);\n                }\n            }\n            else{\n                increaseRound(batch);\n            }\n        }\n        if(!useKeyboard && cursor.isChangedPosition())\n            for(Card card:players.get(DOWN_PLAYER).getCards())\n            {\n                Rectangle rectangleCard = Deck.getIstance().getCard(card).getBoundingRectangle();\n                //if(rectangleCard.contains(cursor.getX(), cursor.getY()))\n                    //System.out.println(\"Carta giocatore in basso: \" + card.getSuite() + \" \" + card.getNumber());\n\n            }\n    }\n\n    private void printRaise(int currentValue, int playerShift, Batch batch) {\n       printNotify(playerShift, \"RAISE \" + currentValue, batch);\n    }\n\n    private void printFold(int playerShift, Batch batch) {\n        printNotify(playerShift, \"FOLD\", batch);\n    }\n\n    private void printCheck(int playerShift, Batch batch) {\n        printNotify(playerShift, \"CHECK\", batch);\n    }\n\n    private void printNotify(int playerShift, String s, Batch batch)\n    {\n        bitmapFont.draw(batch, s,\n                players.get(playerShift).getNotifyX(),players.get(playerShift).getNotifyY());\n        // wait pls :-(\n    }\n\n    public void increaseRound(Batch batch){\n        System.out.println(playerShift+\" --ROUND--> \"+round);\n        playerShift++;\n        currentPlayerValue=currentValue;\n        if(playerShift==4){\n            currentValue=20;\n            currentPlayerValue=20;\n            for(Player p:players)\n                if(!p.isFold()) {\n                    if(p.getMoney()>=p.getCurrentChecked())\n                        p.setMoney(p.getMoney() - p.getCurrentChecked());\n                    p.setCurrentChecked(0);\n                }\n            playerShift=0;\n            round++;\n            if(round==4){\n                \n                win(batch);\n                \n                for(Player p:players){\n                    p.setCurrentChecked(0);\n                }\n                isRoundFinished = true;\n                dealer.shuffle();\n                playerShift=0;\n                round=1;\n                setAllCardForAllPlayer();\n            }\n        }\n    }\n\n    private void win(Batch batch) {\n        /*\n        cosa copiata:\n        Adesso passiamo al valore delle combinazioni delle carte nel Poker all’italiana.\n        In questo elenco vediamo le combinazioni da quella piu’ forte a quella piu’ debole:\n\n            Scala reale (5 carte consecutive dello stesso seme)\n            Poker (4 carte dello stesso valore)\n            Colore (5 carte con lo stesso seme)\n            Full (3 carte dello stesso valore + 2 carte dello stesso valore)\n            Scala (5 carte consecutive con semi differenti)\n            Tris (3 carte dello stesso valore)\n            Doppia coppia (2 carte dello stesso valore + altre 2 carte dello stesso valore)\n            Coppia (2 carte dello stesso valore)\n            Carte piu’ alta\n         */\n    }\n\n    public void dispose(){\n        deck.dispose();\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- core/src/com/mygdx/game/Game.java	(revision f01f6d9d1e290252703977deb05a5665b2daeec5)
+++ core/src/com/mygdx/game/Game.java	(date 1600852244738)
@@ -144,7 +144,9 @@
             {
                 for(String buh:an.getAnswerSet())
                 {
+                    System.out.println("INIZIO AS");
                     System.out.println(buh);
+                    System.out.println("FINE AS");
                 }
             }
         }
@@ -277,12 +279,12 @@
             if(!player.isFold() && player.getCurrentChecked() < currentValue) {
 
                 // if it's in the round where the player can raise the sum
-                if ((round == 1 || round == 3) && player instanceof Human) {
+                if ((round == 1  || round == 3) && player instanceof Human) {
                     bitmapFont.draw(batch, ""+currentPlayerValue, 250,MyGdxGame.WORLD_HEIGHT/2f+15);
                     player.drawKeybord(batch);
 
                     if(Gdx.input.isButtonJustPressed(Input.Buttons.LEFT))
-                        System.out.println("Mouse x: " + cursor.getX() + " y: " + cursor.getY());
+                        //System.out.println("Mouse x: " + cursor.getX() + " y: " + cursor.getY());
 
                     // mouse pressing input
 
@@ -291,7 +293,7 @@
                     if (cursor.intersectSprite(((Human) player).plus)) {
                         if (Gdx.input.isButtonJustPressed(Input.Buttons.LEFT)) {
                             currentPlayerValue += 10;
-                            System.out.println(currentPlayerValue); //get current raise value
+                            //System.out.println(currentPlayerValue); //get current raise value
                         }
                     }
 
@@ -300,7 +302,7 @@
                         if (Gdx.input.isButtonJustPressed(Input.Buttons.LEFT)) {
                             if (currentPlayerValue > currentValue)
                                 currentPlayerValue -= 10;
-                            System.out.println(currentPlayerValue); // get current raise value
+                            //System.out.println(currentPlayerValue); // get current raise value
                         }
                     }
 
@@ -309,7 +311,7 @@
                         if (Gdx.input.isButtonJustPressed(Input.Buttons.LEFT)) {
                             player.setFold(true);
                             printFold(playerShift, batch);
-                            System.out.println(player.isFold()); // set fold true
+                            //System.out.println(player.isFold()); // set fold true
                         }
                     }
 
@@ -318,7 +320,7 @@
                         if (Gdx.input.isButtonJustPressed(Input.Buttons.LEFT)) {
                             player.setCurrentChecked(currentValue);
                             currentPlayerValue=currentValue;
-                            System.out.println(currentValue); //get current check value
+                            //System.out.println(currentValue); //get current check value
                             printCheck(playerShift, batch);
                             increaseRound(batch);
                         }
@@ -328,7 +330,7 @@
                         if (Gdx.input.isButtonJustPressed(Input.Buttons.LEFT) && currentPlayerValue >currentValue) {
                             currentValue = currentPlayerValue;
                             player.setCurrentChecked(currentPlayerValue);
-                            System.out.println(currentValue); //get current check value
+                            //System.out.println(currentValue); //get current check value
                             printRaise(currentValue, playerShift, batch);
                             if(playerShift==0)
                                 increaseRound(batch);
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"RemoteRepositoriesConfiguration\">\n    <remote-repository>\n      <option name=\"id\" value=\"central\" />\n      <option name=\"name\" value=\"Maven Central repository\" />\n      <option name=\"url\" value=\"https://repo1.maven.org/maven2\" />\n    </remote-repository>\n    <remote-repository>\n      <option name=\"id\" value=\"jboss.community\" />\n      <option name=\"name\" value=\"JBoss Community repository\" />\n      <option name=\"url\" value=\"https://repository.jboss.org/nexus/content/repositories/public/\" />\n    </remote-repository>\n    <remote-repository>\n      <option name=\"id\" value=\"MavenRepo\" />\n      <option name=\"name\" value=\"MavenRepo\" />\n      <option name=\"url\" value=\"https://repo.maven.apache.org/maven2/\" />\n    </remote-repository>\n    <remote-repository>\n      <option name=\"id\" value=\"maven2\" />\n      <option name=\"name\" value=\"maven2\" />\n      <option name=\"url\" value=\"https://oss.sonatype.org/content/repositories/releases/\" />\n    </remote-repository>\n    <remote-repository>\n      <option name=\"id\" value=\"maven\" />\n      <option name=\"name\" value=\"maven\" />\n      <option name=\"url\" value=\"https://oss.sonatype.org/content/repositories/snapshots/\" />\n    </remote-repository>\n    <remote-repository>\n      <option name=\"id\" value=\"BintrayJCenter\" />\n      <option name=\"name\" value=\"BintrayJCenter\" />\n      <option name=\"url\" value=\"https://jcenter.bintray.com/\" />\n    </remote-repository>\n    <remote-repository>\n      <option name=\"id\" value=\"MavenLocal\" />\n      <option name=\"name\" value=\"MavenLocal\" />\n      <option name=\"url\" value=\"file:/$MAVEN_REPOSITORY$/\" />\n    </remote-repository>\n    <remote-repository>\n      <option name=\"id\" value=\"Google\" />\n      <option name=\"name\" value=\"Google\" />\n      <option name=\"url\" value=\"https://dl.google.com/dl/android/maven2/\" />\n    </remote-repository>\n    <remote-repository>\n      <option name=\"id\" value=\"MavenLocal\" />\n      <option name=\"name\" value=\"MavenLocal\" />\n      <option name=\"url\" value=\"file:$MAVEN_REPOSITORY$/\" />\n    </remote-repository>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/jarRepositories.xml	(revision f01f6d9d1e290252703977deb05a5665b2daeec5)
+++ .idea/jarRepositories.xml	(date 1600246790222)
@@ -46,5 +46,10 @@
       <option name="name" value="MavenLocal" />
       <option name="url" value="file:$MAVEN_REPOSITORY$/" />
     </remote-repository>
+    <remote-repository>
+      <option name="id" value="MavenLocal" />
+      <option name="name" value="MavenLocal" />
+      <option name="url" value="file:$MAVEN_REPOSITORY$" />
+    </remote-repository>
   </component>
 </project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"JavaScriptSettings\">\n    <option name=\"languageLevel\" value=\"ES6\" />\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" default=\"false\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\n  </component>\n  <component name=\"ProjectType\">\n    <option name=\"id\" value=\"Android\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision f01f6d9d1e290252703977deb05a5665b2daeec5)
+++ .idea/misc.xml	(date 1600246790230)
@@ -4,7 +4,7 @@
   <component name="JavaScriptSettings">
     <option name="languageLevel" value="ES6" />
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="false" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_7" default="false" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(date 1600246790214)
+++ .idea/compiler.xml	(date 1600246790214)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="1.7" />
+  </component>
+</project>
\ No newline at end of file
